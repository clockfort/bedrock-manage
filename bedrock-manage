#!/bin/bash

# User-Editable Settings
mc_dir="/home/clockfort/minecraft"
mc_screen_name="minecraft_server"
mc_world_name="morr"
mc_logfile="$mc_dir/minecraft.log"
mc_shutdown_timeout="15s"
mc_backups_dir="/home/clockfort/minecraft_backups"
mc_windows_dir="/home/clockfort/windows"
scratch_dir="/home/clockfort/scratch"

mc_generate_maps="true"
www_dir="/home/clockfort/www/html"
unmined_dir="/home/clockfort/unmined"

stop_file="/home/clockfort/disable_backups"

# Computed Parameters
cd "$mc_dir"
mkdir -p "$mc_backups_dir"
if [ $mc_generate_maps = "true" ]; then
	mkdir -p "$www_dir"
fi

mc_pid=`pidof bedrock_server`
mc_ret=$?

timestamp_iso8601=`date --iso-8601=m`
mc_backup_name=`date +'mc_backup_%Y_%m_%d_%H_%M_%S'`
backup_fullpath="$mc_backups_dir/$mc_backup_name"

warm_cache () {
	echo "Warming LevelDB cache..."
	vmtouch -t "$mc_dir/worlds/$mc_world_name"
}

start_mc_server () {
	echo "Starting minecraft server. Logs will be written to $mc_logfile"
	LD_LIBRARY_PATH="$mc_dir" screen -dmS "$mc_screen_name" -L -Logfile "$mc_logfile" ./bedrock_server
	sleep 1
	local mc_newpid=`pidof bedrock_server`
	local mc_newpid_ret=$?
	if [ $mc_newpid_ret -ne 0 ]; then
		echo "Error: Minecraft server failed to spawn."
		exit 1
	else
		echo "Done, server started and running; new pid is $mc_newpid"
	fi
	warm_cache
}

backup_offline () {
	local tar_fullpath="$mc_backups_dir/$mc_backup_name.tar"

	echo "Performing an offline backup to $backup_fullpath ..."
	
	time cp -r "$mc_dir" "$backup_fullpath"

	echo "Compressing..."
	cd "$mc_backups_dir"
	time tar cf \
		"$mc_backup_name.tar" \
		"$mc_backup_name/allowlist.json" \
		"$mc_backup_name/server.properties" \
		"$mc_backup_name/minecraft.log" \
		"$mc_backup_name/www_templates/" \
		"$mc_backup_name/worlds" &

	if [ $mc_generate_maps = "true" ]; then
		generate_maps
	fi

	# we're waiting both for tar to finish and the map gen's subprocesses, because the mapgen is using this dir
	wait
	echo "All subprocesses using the uncompressed backup dir have completed. Removing it."
	rm -fr "$mc_backup_name"
	cd "$mc_dir"

	echo "Done. Server was backed up to $tar_fullpath"
}

send_command_to_server_and_wait () {
	# the prepended newline is in case operator left manual input on the console
	screen -S "$mc_screen_name" -X stuff "\n$1\n"
	sleep $2 # wait for logfile to flush
}

say () {
	screen -S "$mc_screen_name" -X stuff "\nsay $1\n"
}

check_player_count () {
	echo "Checking online player count..."
	send_command_to_server_and_wait "list" 15s
	local num_players=`grep "There are .* players online" "$mc_logfile" | tail -n 1 | grep -Eo 'are [0-9]{1,}' | grep -Eo '[0-9]{1,}'`
	if [ $num_players -ne 0 ]; then
		echo "Active player count is $num_players."
		say "$num_players player(s) online, so backup was not performed. Will try again later."
		exit 0
	else
		echo "There are no active players."
	fi
}

stop_running_server () {
	echo "Stopping running server..."
	send_command_to_server_and_wait "stop" $mc_shutdown_timeout
	mc_checkpid=`pidof bedrock_server`
	mc_checkpid_ret=$?

	if [ $mc_checkpid_ret -ne 0 ]; then
		echo "Server at pid $mc_pid was shut down."
	else
		echo "Error: Server did not stop within timeout."
		exit 1
	fi

	local exit_was_clean=`tail -n 1 $mc_logfile | grep -i "Quit correctly" | wc -l`
	if [ $exit_was_clean -eq 1 ]; then
		echo "Detected a clean shutdown and flush of the server."
	else
		echo "Error: Did not detect a clean shutdown and flush of the server. Please consult $mc_logfile for more information."
		exit 1
	fi
}

generate_maps () {
	local pid_list=""
	local max_err=0

	echo "Generating overworld map..."
	time "$unmined_dir/unmined-cli" web render --world="$backup_fullpath/worlds/$mc_world_name" --output "$www_dir/overworld" \
		--zoomout=4 --zoomin=4 --dimension overworld --background="#000000" --log-level="warning" &
	pid_list="$pid_list $!"

	echo "Generating nether map [upper slice]..."
	"$unmined_dir/unmined-cli" web render --world="$backup_fullpath/worlds/$mc_world_name" --output="$www_dir/nether" \
		--zoomout=4 --zoomin=4 --dimension nether --background="#000000" --topY 126 --gndxray="true" --log-level="warning" &
	pid_list="$pid_list $!"

	echo "Generating nether map [lower slice]..."
	"$unmined_dir/unmined-cli" web render --world="$backup_fullpath/worlds/$mc_world_name" --output="$www_dir/nether_lower" \
		--zoomout=4 --zoomin=4 --dimension nether --background="#000000" --topY 70 --gndxray="true" --log-level="warning" &
	pid_list="$pid_list $!"

	echo "Generating end map..."
	"$unmined_dir/unmined-cli" web render --world="$backup_fullpath/worlds/$mc_world_name" --output="$www_dir/end" \
		--zoomout=4 --zoomin=4 --dimension end --background="#000000" &

	generate_index_html

	echo "Waiting for map generation sub-processes to return..."
	for pid in $pid_list; do
		wait $pid || let "max_err=1"
	done

	if [ $max_err -eq 1 ]; then
		echo "An error occured while generating maps. Exiting."
		exit 1
	fi
	echo "Map generation complete."
}

generate_index_html () {
	echo "Generating HTML..."
	cp "$mc_dir/www_templates/index.html.template" "$www_dir/index.html.temp"
	sed -i "s/%TIMESTAMP%/$timestamp_iso8601/g" "$www_dir/index.html.temp"
	mv "$www_dir/index.html.temp" "$www_dir/index.html"
}

get_running_status () {
	if [ $mc_ret -ne 0 ]; then
		echo "Minecraft server is not running."
		return 0
	else
		echo "Running Minecraft server found at pid $mc_pid"
		check_player_count
		return 1
        fi
}

abort_with_err_if_running () {
	get_running_status
	local status = "$?"
	if [ $status = 1 ]; then
		echo "Refusing to run due to an active server."
		exit 1
	fi
}

export_and_lock () {
	abort_with_err_if_running
	echo "not implemented"
}

import_and_unlock () {
	abort_with_err_if_running
	echo "not implemented"
}

print_usage () {
	echo "Possible commands are 'start', 'stop', 'status', 'backup', 'export', 'import'"
}

if [ $1 = "start" ]; then
	start_mc_server
	exit 0
fi

if [ $1 = "stop" ]; then
	stop_running_server
	exit 0
fi

if [ $1 = "status" ]; then
	get_running_status
	exit 0
fi

if [ $1 = "backup" ]; then
	if test -f "$stop_file"; then
		echo "The maintenance stop file $stop_file exists. Exiting without doing anything."
		exit 0
	fi

	if [ $mc_ret -ne 0 ]; then
		echo "Minecraft server is not online. Exiting out of caution."
		exit 1
	else
		echo "Running Minecraft server found at pid $mc_pid"
		check_player_count
		stop_running_server
		backup_offline
		start_mc_server
		exit 0
	fi
fi

if [ $1 = "fast-backup" ]; then
	mc_generate_maps="false"
	stop_running_server
	backup_offline
	start_mc_server
	exit 0
fi

if [ $1 = "export" ]; then
        mc_generate_maps="false"
        stop_running_server
        backup_offline

	#export_and_lock
	exit 0
fi

if [ $1 = "import" ]; then
	import_and_unlock
	exit 0
fi

print_usage

